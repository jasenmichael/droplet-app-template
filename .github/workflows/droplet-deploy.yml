name: Deploy App to Droplet

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  create-droplet:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load Ansible Vars into Environment
        run: |
          sed -e 's/: /=/' droplet-config.yml > vars.tmp
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < vars.tmp
          rm vars.tmp

      - name: Cache DigitalOcean CLI
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-${{ runner.os }}-v1
          restore-keys: |
            doctl-${{ runner.os }}-v1

      - name: Install DigitalOcean CLI (if cache is missed)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.93.0/doctl-1.93.0-linux-amd64.tar.gz | tar -xz
          sudo mv doctl /usr/local/bin
          doctl auth init -t ${{ secrets.DIGITALOCEAN_API_KEY }}

      - name: Get droplet info (Check if droplet with name exists)
        id: droplet_info
        run: |
          echo "Checking for droplet with name: ${{ env.DROPLET_NAME }}"
          droplet_name=$(doctl compute droplet list --format "Name" --no-header | grep ${{ env.DROPLET_NAME }} || true)
          echo "Droplet name result: $droplet_name"
          if [ -z "$droplet_name" ]; then
            echo "Droplet not found"
            echo "droplet_name=" >> $GITHUB_ENV
          else
            echo "droplet_name=$droplet_name" >> $GITHUB_ENV
            echo "Droplet exists"
          fi

      - name: Create Droplet if not exists
        if: ${{ env.droplet_name != env.DROPLET_NAME }}
        run: |
          doctl compute droplet create ${{ env.DROPLET_NAME }} \
            --size s-1vcpu-1gb \
            --image ubuntu-20-04-x64 \
            --region nyc1 \
            --ssh-keys "44084429" \
            --user-data '#!/bin/bash
                          # Create www user
                          useradd -m -s /bin/bash www
                          # Set up SSH for www user
                          mkdir -p /home/www/.ssh
                          echo "${{ secrets.GH_TO_DROPLET_PUBLIC_KEY }}" > /home/www/.ssh/authorized_keys
                          chmod 700 /home/www/.ssh
                          chmod 600 /home/www/.ssh/authorized_keys
                          chown -R www:www /home/www/.ssh' \
            --wait

      - name: Get Droplet IP Address
        id: droplet_ip
        run: |
          droplet_ip=$(doctl compute droplet list --format "Name,PublicIPv4" --no-header | grep "${{ env.DROPLET_NAME }}" | awk '{print $2}')
          if [ -z "$droplet_ip" ]; then
            echo "Droplet IP not found"
            exit 1
          else
            echo "Droplet IP found: $droplet_ip"
            echo "droplet_ip=$droplet_ip" >> $GITHUB_ENV
          fi

      - name: Set up SSH for GitHub Actions
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.droplet_ip }} >> ~/.ssh/known_hosts

  deploy-app:
    runs-on: ubuntu-latest
    needs: create-droplet
    steps:
      - name: Run Ansible Playbook for ${{ env.DROPLET_RUNTIME }}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.droplet_ip }}
          username: www
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          script: |
            git config --global url."https://${{ secrets.GH_TOKEN }}@github.com".insteadOf "https://github.com"
            ansible-playbook ${{ env.PLAYBOOK_PATH }} --extra-vars "@${{ env.APP_PATH }}/droplet-config.yml"
