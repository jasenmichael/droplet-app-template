name: Deploy App to Droplet

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout droplet-config.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            droplet-config.yml
          sparse-checkout-cone-mode: false

      - name: Load Ansible Vars .env File
        run: |
          sed '/^#/d' droplet-config.yml | sed -e 's/: /=/' > vars.env

      - name: Upload .env as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vars-env
          path: vars.env

  create-droplet:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Download vars.env artifact
        uses: actions/download-artifact@v4
        with:
          name: vars-env

      - name: Load vars.env into Environment
        run: |
          cat vars.env >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache DigitalOcean CLI
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-Linux-v1
          restore-keys: |
            doctl-Linux-v1

      - name: Install DigitalOcean CLI (if doctl is missing)
        run: |
          if [ ! -f /usr/local/bin/doctl ]; then
            curl -sL https://github.com/digitalocean/doctl/releases/download/v1.93.0/doctl-1.93.0-linux-amd64.tar.gz | tar -xz -C /usr/local/bin
            sudo chmod +x /usr/local/bin/doctl
          fi

      - name: Get droplet info (Check if droplet with name exists)
        id: droplet_info
        run: |
          doctl auth init -t ${{ secrets.DIGITALOCEAN_API_KEY }}
          APP_USER=${{ env.APP_USER }} \
          GH_TO_DROPLET_PUBLIC_KEY="${{ secrets.GH_TO_DROPLET_PUBLIC_KEY }}" \
          envsubst < ./user-data-script.sh > ./user-data-script-ready.sh

          echo "Checking for droplet with name: ${{ env.DROPLET_NAME }}"
          droplet_exists=$(doctl compute droplet list --format "Name" --no-header | grep ${{ env.DROPLET_NAME }} && echo "true" || echo "false")
          if [ "$droplet_exists" == "false" ]; then
            echo "droplet_exists=false" >> $GITHUB_ENV
            echo "Droplet not found"
          else
            echo "droplet_exists=true" >> $GITHUB_ENV
            echo 'Droplet "${{ env.DROPLET_NAME }}" exists'
           fi

      - name: Create droplet and provision base os (if droplet does not exists)
        if: ${{ env.droplet_exists == 'false' }}
        run: |
          doctl compute droplet create ${{ env.DROPLET_NAME }} \
            --size ${{ env.DROPLET_SIZE }} \
            --region ${{ env.DROPLET_REGION }} \
            --image ${{ env.DROPLET_IMAGE }} \
            --ssh-keys ${{ env.DROPLET_SSH_KEYS }} \
            --user-data-file ./user-data-script-ready.sh \
            --wait

      - name: Get Droplet IP Address
        id: droplet_ip
        run: |
          sleep 3
          droplet_ip=$(doctl compute droplet list --format "Name,PublicIPv4" --no-header | grep "${{ env.DROPLET_NAME }}" | awk '{print $2}' | head -n 1)
          if [ -z "$droplet_ip" ]; then
            echo "Droplet IP not found"
            exit 1
          else
            echo "Droplet IP found: $droplet_ip"
            echo "droplet_ip=$droplet_ip" >> $GITHUB_ENV
            echo "droplet_ip=$droplet_ip" >> vars.env
          fi

      - name: Configure github ssh access to droplet
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # ssh-keyscan -H ${{ env.droplet_ip }} >> ~/.ssh/known_hosts
          # chmod 644 ~/.ssh/known_hosts

      - name: Wait for newly created droplet to be ready for ssh connections
        if: ${{ env.droplet_exists == 'false' }}
        run: |
          for i in {1..18}; do
            echo "Attempting to SSH into the droplet... (Attempt $i/18)"
            ssh -o BatchMode=yes -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ env.APP_USER }}@${{ env.droplet_ip }} "echo SSH connection successful" && break
            sleep 10
          done

          if [ $i -eq 18 ]; then
            echo "Failed to connect to the droplet after 18 attempts. Exiting..."
            exit 1
          fi

      - name: Remove Existing Configuration File
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.droplet_ip }}
          username: ${{ env.APP_USER }}
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          # key_path: ~/.ssh/id_rsa
          script: |
            if [ -f "/home/${{ env.APP_USER }}/droplet-config.yml" ]; then
              rm -f /home/${{ env.APP_USER }}/droplet-config.yml 2> /dev/null
            fi

      - name: Copy Configuration File to Droplet
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no droplet-config.yml ${{ env.APP_USER }}@${{ env.droplet_ip }}:/home/${{ env.APP_USER }}/

      - name: Re-provision droplet base os (if droplet exists)
        if: ${{ env.droplet_exists == 'true' }}
        run: |
          echo "Re-provision droplet base image (./user-data-script-ready.sh)"
          script_contents=$(cat ./user-data-script-ready.sh)
          doctl compute ssh ${{ env.DROPLET_NAME }} \
            --ssh-user ${{ env.APP_USER }} \
            --ssh-key-path ~/.ssh/id_rsa \
            --ssh-command "sudo bash -c '$script_contents'"

      - name: Validate init script succeeded with retries
        run: |
          # Retry 12 times, checking if the file exists, then read its content
          for i in {1..12}; do
            init_succeed=$(doctl compute ssh ${{ env.DROPLET_NAME }} \
              --ssh-user ${{ env.APP_USER }} \
              --ssh-key-path ~/.ssh/id_rsa \
              --ssh-command "
                if [[ -f /home/${{ env.APP_USER }}/log/provision-droplet-init.log ]]; then
                  log_content=\$(cat /home/${{ env.APP_USER }}/log/provision-droplet-init.log | tr -d '\r\n')
                  if [[ \$log_content == 'succeed' ]]; then
                    echo 'true'
                  else
                    echo 'false'
                  fi
                else
                  echo 'false'
                fi
              " || echo "false")

            # Check if the file was found and break if so
            if [[ $init_succeed == "true" ]]; then
              echo "Init script log file found or validation succeeded on attempt $i."
              break
            fi

            # Wait before retrying
            echo "Attempt $i/12: Init script log file not found or validation failed. Retrying in 10 seconds..."
            sleep 10
          done

          # Set the result to GitHub environment
          echo "init_succeed=$init_succeed" >> $GITHUB_ENV
          echo "Init script validation completed with status: $init_succeed."
          exit 0

      # - name: Validate init script succeeded with retries
      #   run: |
      #     check_init_status() {
      #       doctl compute ssh ${{ env.DROPLET_NAME }} \
      #         --ssh-user ${{ env.APP_USER }} \
      #         --ssh-key-path ~/.ssh/id_rsa \
      #         --ssh-command "
      #           log_content=\$(cat /home/${{ env.APP_USER }}/log/provision-droplet-init.log | tr -d '\r\n')
      #           if [[ \$log_content == 'succeed' ]]; then
      #             echo 'true'
      #             exit 0
      #           else
      #             echo 'false'
      #             exit 0
      #           fi
      #         " || echo "false"
      #     }

      #     for i in {1..12}; do
      #       init_succeed=$(check_init_status)

      #       if [[ $init_succeed == "true" ]]; then
      #         echo "init_succeed=true" >> $GITHUB_ENV
      #         echo "Init script succeeded on attempt $i."
      #         exit 0
      #       fi

      #       echo "Attempt $i/12: Init script not ready. Retrying in 10 seconds..."
      #       sleep 10
      #     done

      #     echo "init_succeed=false" >> $GITHUB_ENV
      #     echo "Init script validation failed after 12 attempts."
      #     exit 0

      # - name: Validate init script succeeded
      #   id: validate_init
      #   run: |
      #     # Validate init script succeeded
      #     init_succeed=$(doctl compute ssh ${{ env.DROPLET_NAME }} \
      #       --ssh-user ${{ env.APP_USER }} \
      #       --ssh-key-path ~/.ssh/id_rsa \
      #       --ssh-command "
      #         log_content=\$(cat /home/${{ env.APP_USER }}/log/provision-droplet-init.log | tr -d '\r\n')
      #         if [[ \$log_content == 'succeed' ]]; then
      #           echo 'true'
      #           exit 0
      #         else
      #           echo 'false'
      #           exit 0
      #         fi
      #       " || echo "false")
      #     echo "init_succeed: $init_succeed"
      #     echo "init_succeed=$init_succeed" >> $GITHUB_ENV

      - name: Destroy newly created droplet if init script failed
        if: ${{ env.droplet_exists == 'false' && env.init_succeed == 'false' }}
        run: |
          # Destroy the droplet by IP if the init script failed
          echo "Droplet init script failed, destroying droplet by IP..."

          # Get droplet ID by IP address
          droplet_id=$(doctl compute droplet list --format ID,PublicIPv4 --no-header | grep ${{ env.droplet_ip }} | awk '{print $1}')
          echo "Droplet ID $droplet_id"

          if [ -z "$droplet_id" ]; then
            echo "Error: Droplet with IP ${{ env.droplet_ip }} not found."
            exit 1
          fi

          # Delete the droplet by ID
          doctl compute droplet delete $droplet_id --force

      - name: Exit if init script failed
        if: ${{ env.init_succeed == 'false' }}
        run: |
          echo "Droplet init script failed"
          exit 1

      - name: Provision os for app with ansible-playbook
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.droplet_ip }}
          username: ${{ env.APP_USER }}
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          script: |
            # echo PLAYBOOK_PATH: ${{ env.PLAYBOOK_PATH }}
            # echo APP_PATH: ${{ env.APP_PATH }}
            # echo PLAYBOOK_URL: ${{ env.PLAYBOOK_URL }}
            if [ -n "${{ env.PLAYBOOK_URL }}" ]; then
              echo "Downloading playbook from ${{ env.PLAYBOOK_URL }}"
              rm -f ${{ env.PLAYBOOK_PATH }} 2> /dev/null
              wget --no-verbose ${{ env.PLAYBOOK_URL }} -O ${{ env.PLAYBOOK_PATH }} 2> /dev/null
            else
              echo "PLAYBOOK_URL not provided, skipping download"
            fi
            # git config --global --add safe.directory ${{ env.APP_PATH }}
            git config --global url."https://${{ secrets.GH_TOKEN }}@github.com".insteadOf "https://github.com"
            # sudo chown -R ${{ env.APP_USER }}:${{ env.APP_USER }} ${{ env.APP_PATH }}
            if [ -f "${{ env.PLAYBOOK_PATH }}" ]; then
              ansible-playbook -i localhost, ${{ env.PLAYBOOK_PATH }} --extra-vars "@/home/${{ env.APP_USER }}/droplet-config.yml" --flush-cache
            else
              echo "Playbook not provided in ${{ env.PLAYBOOK_PATH }}"
              exit 1
            fi

  # echo-vars:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - setup
  #     - create-droplet

  #   steps:
  #     - name: Download vars.env artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: vars-env

  #     - name: Load vars.env into Environment
  #       run: |
  #         cat vars.env >> $GITHUB_ENV

  #     - name: echo an env for testing
  #       run: |
  #         echo "DROPLET_NAME: ${{ env.DROPLET_NAME }}"
