name: Deploy App to Droplet

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-application:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load Ansible Vars into Environment
        run: |
          sed '/^#/d' droplet-config.yml | sed -e 's/: /=/' > vars.tmp
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < vars.tmp
          rm vars.tmp

      - name: Cache DigitalOcean CLI
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/doctl
          key: doctl-Linux-v1
          restore-keys: |
            doctl-Linux-v1

      - name: Install DigitalOcean CLI (if doctl is missing)
        run: |
          if [ ! -f /usr/local/bin/doctl ]; then
            curl -sL https://github.com/digitalocean/doctl/releases/download/v1.93.0/doctl-1.93.0-linux-amd64.tar.gz | tar -xz -C /usr/local/bin
            sudo chmod +x /usr/local/bin/doctl
          fi

      - name: Get droplet info (Check if droplet with name exists)
        id: droplet_info
        run: |
          doctl auth init -t ${{ secrets.DIGITALOCEAN_API_KEY }}
          echo "Checking for droplet with name: ${{ env.DROPLET_NAME }}"
          droplet_exists=$(doctl compute droplet list --format "Name" --no-header | grep ${{ env.DROPLET_NAME }} && echo "true" || echo "false")
          if [ "$droplet_exists" == "false" ]; then
            echo "droplet_exists=false" >> $GITHUB_ENV
            echo "Droplet not found"
          else
            echo "droplet_exists=true" >> $GITHUB_ENV
            echo "Droplet exists"
          fi

      - name: Create Droplet if not exists
        if: ${{ env.droplet_exists == 'false' }}
        run: |
          doctl compute droplet create ${{ env.DROPLET_NAME }} \
            --size ${{ env.DROPLET_SIZE }} \
            --image ${{ env.DROPLET_IAMGE }} \
            --region ${{ env.DROPLET_REGION }} \
            --ssh-keys ${{ env.DROPLET_SSH_KEYS }} \
            --user-data '#!/bin/bash
                          apt-get update -y
                          apt-get upgrade -y
                          apt install -y ansible nginx certbot python3-certbot-nginx
                          # Create APP_USER user
                          useradd -m -U -s /bin/bash ${{ env.APP_USER }}
                          usermod -aG sudo ${{ env.APP_USER }}
                          # Set up SSH for APP_USER user
                          mkdir -p /home/${{ env.APP_USER }}/.ssh
                          echo "${{ secrets.GH_TO_DROPLET_PUBLIC_KEY }}" > /home/${{ env.APP_USER }}/.ssh/authorized_keys
                          chmod 700 /home/${{ env.APP_USER }}/.ssh
                          chmod 600 /home/${{ env.APP_USER }}/.ssh/authorized_keys
                          chown -R ${{ env.APP_USER }}:${{ env.APP_USER }} /home/${{ env.APP_USER }}/.ssh
                          echo "%sudo ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
                          echo "root ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
                          echo "${{ env.APP_USER }} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers'
                                                    # Nginx and SSL Configuration
                          apt install -y nginx
                          systemctl enable nginx
                          systemctl start nginx
                          
                          # Redirect HTTP to HTTPS
                          cat <<EOF > /etc/nginx/sites-available/default
                          server {
                              listen 80;
                              server_name ${{ env.DROPLET_IP }}; # Update with your droplet's IP address or domain
                              return 301 https://\$host\$request_uri;
                          }

                          server {
                              listen 443 ssl;
                              server_name ${{ env.DROPLET_IP }}; # Update with your droplet's IP address or domain

                              ssl_certificate /etc/letsencrypt/live/$${{ env.DROPLET_IP }}/fullchain.pem;
                              ssl_certificate_key /etc/letsencrypt/live/$${{ env.DROPLET_IP }}/privkey.pem;
                              ssl_protocols TLSv1.2 TLSv1.3;
                              ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256';
                              ssl_prefer_server_ciphers off;

                              root /var/www/html;
                              index index.html index.htm index.nginx-debian.html;

                              location / {
                                  try_files \$uri \$uri/ =404;
                              }
                          }
                          EOF
                          
                          # Install Certbot and obtain SSL certificates
                          certbot --nginx -d ${{ env.DROPLET_IP }} --agree-tos --non-interactive --email youremail@example.com
                          
                          # Enable automatic SSL renewal
                          echo "0 0 * * * root certbot renew --quiet" >> /etc/crontab
                          
                          # Restart Nginx to apply SSL
                          systemctl restart nginx' \
            --wait

      - name: Get Droplet IP Address
        id: droplet_ip
        run: |
          droplet_ip=$(doctl compute droplet list --format "Name,PublicIPv4" --no-header | grep "${{ env.DROPLET_NAME }}" | awk '{print $2}' | head -n 1)
          if [ -z "$droplet_ip" ]; then
            echo "Droplet IP not found"
            exit 1
          else
            echo "Droplet IP found: $droplet_ip"
            echo "droplet_ip=$droplet_ip" >> $GITHUB_ENV
          fi

      - name: Wait for newly created droplet to be ready for ssh connections
        if: ${{ env.droplet_exists == 'false' }}
        run: |
          sleep 120

      - name: Remove Existing Configuration File
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.droplet_ip }}
          username: ${{ env.APP_USER }}
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          script: |
            if [ -f "/home/${{ env.APP_USER }}/droplet-config.yml" ]; then
              rm -f /home/${{ env.APP_USER }}/droplet-config.yml 2> /dev/null
            fi

      - name: Copy Configuration File to Droplet
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ env.droplet_ip }}
          username: ${{ env.APP_USER }}
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          source: droplet-config.yml
          target: /home/${{ env.APP_USER }}/

      - name: Run Ansible Playbook
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.droplet_ip }}
          username: ${{ env.APP_USER }}
          key: ${{ secrets.GH_TO_DROPLET_PRIVATE_KEY }}
          script: |
            echo PLAYBOOK_PATH: ${{ env.PLAYBOOK_PATH }}
            echo APP_PATH: ${{ env.APP_PATH }}
            echo PLAYBOOK_PATH: ${{ env.PLAYBOOK_PATH }}
            echo PLAYBOOK_URL: ${{ env.PLAYBOOK_URL }}
            if [ -n "${{ env.PLAYBOOK_URL }}" ]; then
              echo "Downloading playbook from ${{ env.PLAYBOOK_URL }}"
              rm -f ${{ env.PLAYBOOK_PATH }} 2> /dev/null
              wget --no-verbose ${{ env.PLAYBOOK_URL }} -O ${{ env.PLAYBOOK_PATH }} 2> /dev/null
            else
              echo "PLAYBOOK_URL not provided, skipping download"
            fi
            git config --global url."https://${{ secrets.GH_TOKEN }}@github.com".insteadOf "https://github.com"
            git config --global --add safe.directory ${{ env.APP_PATH }}
            sudo chown -R ${{ env.APP_USER }}:${{ env.APP_USER }} ${{ env.APP_PATH }}
            if [ -f "${{ env.PLAYBOOK_PATH }}" ]; then
              ansible-playbook -i localhost, ${{ env.PLAYBOOK_PATH }} --extra-vars "@/home/${{ env.APP_USER }}/droplet-config.yml" --flush-cache
            else
              echo "Playbook not provided in ${{ env.PLAYBOOK_PATH }}"
              exit 1
            fi
